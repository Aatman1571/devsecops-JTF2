name: DevSecOps Pipeline

on:
  push:
    branches: [main]

permissions:
  contents: read
  actions: write
  id-token: write
  packages: read
  security-events: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install
        working-directory: ./app

      - name: Run Tests
        run: npm test || echo "No tests yet"
        working-directory: ./app

  dependency-scan:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "NodeApp"
          path: ./app
          format: HTML
          out: reports
          args: "--noupdate"

      - name: Upload Dependency Check Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

      - name: Push Security Scan Result to Prometheus Pushgateway
        run: |
          status="success"
          # Check if Dependency-Check report contains HIGH or CRITICAL vulnerabilities
          if grep -qE 'HIGH|CRITICAL' reports/dependency-check-report.html; then
            status="failure"
          fi

          cat <<EOF | curl --data-binary @- https://20e98b7e38a1.ngrok-free.app/metrics/job/devsecops_pipeline/instance/dependency-scan
          # TYPE security_scan_status gauge
          security_scan_status{status="$status"} 1
          EOF

  dast-scan:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v3

      - name: Start App
        run: |
          cd app
          nohup npm install && npm start &
          sleep 10

      - name: Pre-create report files with proper permissions
        run: |
          touch report_json.json report_md.md report_html.html
          chmod 666 report_json.json report_md.md report_html.html

      - name: Run ZAP Full Scan (Manual)
        run: |
          docker run -v ${{ github.workspace }}:/zap/wrk/:rw --network=host ghcr.io/zaproxy/zaproxy:stable \
            zap-full-scan.py -t http://localhost:3000 \
            -J report_json.json -w report_md.md -r report_html.html -I

      - name: Upload ZAP Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_json.json
            report_md.md
            report_html.html

      - name: Push Security Scan Result to Prometheus Pushgateway
        run: |
          status="success"
          # Optional: smarter logic using scan report content
          if grep -qi "FAIL" report_md.md; then
            status="failure"
          fi

          cat <<EOF | curl --data-binary @- https://20e98b7e38a1.ngrok-free.app/metrics/job/devsecops_pipeline/instance/dast-scan
          # TYPE security_scan_status gauge
          security_scan_status{status="$status"} 1
          EOF

  deploy:
    runs-on: ubuntu-latest
    needs:
    - build-test
    - dependency-scan
    - dast-scan
    - iac-provision
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install and Start App
        run: |
          cd app
          npm install
          nohup npm start &

      - name: Optional - Expose App via Ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok -y
          ngrok config add-authtoken ${{ secrets.NGROK_AUTH_TOKEN }}
          nohup ngrok http 3000 > ngrok.log &
          sleep 10
          echo "Ngrok public URL:"
          curl http://localhost:4040/api/tunnels | jq -r .tunnels[0].public_url

      - name: Push Deploy Status to Prometheus Pushgateway
        run: |
          status="success"
          if [ "${{ job.status }}" != "success" ]; then
            status="failure"
          fi

          cat <<EOF | curl --data-binary @- https://20e98b7e38a1.ngrok-free.app/metrics/job/devsecops_pipeline/instance/deploy
          # TYPE ci_pipeline_status gauge
          ci_pipeline_status{status="$status"} 1
          EOF


  iac-provision:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Initialize Terraform
        run: terraform init
        working-directory: ./iac/terraform

      - name: Apply Terraform
        run: terraform apply -auto-approve
        working-directory: ./iac/terraform

      - name: Push build result to Prometheus Pushgateway
        run: |
          status="success"
          if [ "${{ job.status }}" != "success" ]; then
            status="failure"
          fi

          cat <<EOF | curl --data-binary @- https://20e98b7e38a1.ngrok-free.app/metrics/job=devsecops_pipeline/job_name=${{ github.job }}
          # TYPE ci_pipeline_status gauge
          ci_pipeline_status{status="$status"} 1
          EOF
